"use strict";(self.webpackChunkrancher_docs=self.webpackChunkrancher_docs||[]).push([[37810],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,_=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return t?a.createElement(_,o(o({ref:n},u),{},{components:t})):a.createElement(_,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2282:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>_,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={title:"RKE Hardening Guide"},o=void 0,s={unversionedId:"pages-for-subheaders/rke1-hardening-guide",id:"pages-for-subheaders/rke1-hardening-guide",title:"RKE Hardening Guide",description:"This document provides prescriptive guidance for how to harden an RKE cluster intended for production, before provisioning it with Rancher. It outlines the configurations and controls required for Center for Information Security (CIS) Kubernetes benchmark controls.",source:"@site/docs/pages-for-subheaders/rke1-hardening-guide.md",sourceDirName:"pages-for-subheaders",slug:"/pages-for-subheaders/rke1-hardening-guide",permalink:"/pages-for-subheaders/rke1-hardening-guide",draft:!1,editUrl:"https://github.com/rancher/rancher-docs/edit/main/docs/pages-for-subheaders/rke1-hardening-guide.md",tags:[],version:"current",lastUpdatedAt:1681222703,formattedLastUpdatedAt:"Apr 11, 2023",frontMatter:{title:"RKE Hardening Guide"},sidebar:"tutorialSidebar",previous:{title:"Self-Assessment and Hardening Guides for Rancher",permalink:"/pages-for-subheaders/rancher-hardening-guides"},next:{title:"RKE Self-Assessment Guide - CIS Benchmark v1.23 - K8s v1.23",permalink:"/reference-guides/rancher-security/hardening-guides/rke1-hardening-guide/rke1-self-assessment-guide-with-cis-v1.23-k8s-v1.23"}},l={},c=[{value:"Host-level requirements",id:"host-level-requirements",level:2},{value:"Configure Kernel Runtime Parameters",id:"configure-kernel-runtime-parameters",level:3},{value:"Configure <code>etcd</code> user and group",id:"configure-etcd-user-and-group",level:3},{value:"Create <code>etcd</code> user and group",id:"create-etcd-user-and-group",level:4},{value:"Kubernetes runtime requirements",id:"kubernetes-runtime-requirements",level:2},{value:"Configure <code>default</code> Service Account",id:"configure-default-service-account",level:3},{value:"Set <code>automountServiceAccountToken</code> to <code>false</code> for <code>default</code> service accounts",id:"set-automountserviceaccounttoken-to-false-for-default-service-accounts",level:4},{value:"Configure Network Policy",id:"configure-network-policy",level:3},{value:"Ensure that all Namespaces have Network Policies defined",id:"ensure-that-all-namespaces-have-network-policies-defined",level:4},{value:"Known Limitations",id:"known-limitations",level:2},{value:"Reference Hardened RKE <code>cluster.yml</code> Configuration",id:"reference-hardened-rke-clusteryml-configuration",level:2},{value:"Reference Hardened RKE Cluster Template Configuration",id:"reference-hardened-rke-cluster-template-configuration",level:2},{value:"Conclusion",id:"conclusion",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},d=u("Tabs"),p=u("TabItem"),m={toc:c};function _(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document provides prescriptive guidance for how to harden an RKE cluster intended for production, before provisioning it with Rancher. It outlines the configurations and controls required for Center for Information Security (CIS) Kubernetes benchmark controls."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This hardening guide describes how to secure the nodes in your cluster. We recommended that you follow this guide before you install Kubernetes.")),(0,r.kt)("p",null,"This hardening guide is intended to be used for RKE clusters and is associated with the following versions of the CIS Kubernetes Benchmark, Kubernetes, and Rancher:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Rancher Version"),(0,r.kt)("th",{parentName:"tr",align:null},"CIS Benchmark Version"),(0,r.kt)("th",{parentName:"tr",align:null},"Kubernetes Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rancher v2.7"),(0,r.kt)("td",{parentName:"tr",align:null},"Benchmark v1.23"),(0,r.kt)("td",{parentName:"tr",align:null},"Kubernetes v1.23 up to v1.25")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"At the time of writing, the upstream CIS Kubernetes v1.25 benchmark is not yet available in Rancher. At this time Rancher is using the CIS v1.23 benchmark when scanning Kubernetes v1.25 clusters. Due to that, the CIS checks 5.2.3, 5.2.4, 5.2.5 and 5.2.6 might fail.")),(0,r.kt)("p",null,"For more details on how to evaluate a hardened RKE cluster against the official CIS benchmark, refer to the RKE self-assessment guides for specific Kubernetes and CIS benchmark versions."),(0,r.kt)("h2",{id:"host-level-requirements"},"Host-level requirements"),(0,r.kt)("h3",{id:"configure-kernel-runtime-parameters"},"Configure Kernel Runtime Parameters"),(0,r.kt)("p",null,"The following ",(0,r.kt)("inlineCode",{parentName:"p"},"sysctl")," configuration is recommended for all nodes types in the cluster. Set the following parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/sysctl.d/90-kubelet.conf"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"vm.overcommit_memory=1\nvm.panic_on_oom=0\nkernel.panic=10\nkernel.panic_on_oops=1\n")),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"sysctl -p /etc/sysctl.d/90-kubelet.conf")," to enable the settings."),(0,r.kt)("h3",{id:"configure-etcd-user-and-group"},"Configure ",(0,r.kt)("inlineCode",{parentName:"h3"},"etcd")," user and group"),(0,r.kt)("p",null,"A user account and group for the ",(0,r.kt)("strong",{parentName:"p"},"etcd")," service is required to be set up before installing RKE."),(0,r.kt)("h4",{id:"create-etcd-user-and-group"},"Create ",(0,r.kt)("inlineCode",{parentName:"h4"},"etcd")," user and group"),(0,r.kt)("p",null,"To create the ",(0,r.kt)("strong",{parentName:"p"},"etcd")," user and group run the following console commands.\nThe commands below use ",(0,r.kt)("inlineCode",{parentName:"p"},"52034")," for ",(0,r.kt)("strong",{parentName:"p"},"uid")," and ",(0,r.kt)("strong",{parentName:"p"},"gid")," for example purposes.\nAny valid unused ",(0,r.kt)("strong",{parentName:"p"},"uid")," or ",(0,r.kt)("strong",{parentName:"p"},"gid")," could also be used in lieu of ",(0,r.kt)("inlineCode",{parentName:"p"},"52034"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'groupadd --gid 52034 etcd\nuseradd --comment "etcd service account" --uid 52034 --gid 52034 etcd --shell /usr/sbin/nologin\n')),(0,r.kt)("p",null,"When deploying RKE through its cluster configuration ",(0,r.kt)("inlineCode",{parentName:"p"},"config.yml")," file, update the ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"gid")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"etcd")," user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n  etcd:\n    gid: 52034\n    uid: 52034\n")),(0,r.kt)("h2",{id:"kubernetes-runtime-requirements"},"Kubernetes runtime requirements"),(0,r.kt)("h3",{id:"configure-default-service-account"},"Configure ",(0,r.kt)("inlineCode",{parentName:"h3"},"default")," Service Account"),(0,r.kt)("h4",{id:"set-automountserviceaccounttoken-to-false-for-default-service-accounts"},"Set ",(0,r.kt)("inlineCode",{parentName:"h4"},"automountServiceAccountToken")," to ",(0,r.kt)("inlineCode",{parentName:"h4"},"false")," for ",(0,r.kt)("inlineCode",{parentName:"h4"},"default")," service accounts"),(0,r.kt)("p",null,"Kubernetes provides a default service account which is used by cluster workloads where no specific service account is assigned to the pod.\nWhere access to the Kubernetes API from a pod is required, a specific service account should be created for that pod, and rights granted to that service account.\nThe default service account should be configured such that it does not provide a service account token and does not have any explicit rights assignments."),(0,r.kt)("p",null,"For each namespace including ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kube-system")," on a standard RKE install, the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," service account must include this value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"automountServiceAccountToken: false\n")),(0,r.kt)("p",null,"Save the following configuration to a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"account_update.yaml"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: default\nautomountServiceAccountToken: false\n")),(0,r.kt)("p",null,"Create a bash script file called ",(0,r.kt)("inlineCode",{parentName:"p"},"account_update.sh"),".\nBe sure to ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod +x account_update.sh")," so the script has execute permissions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash -e\n\nfor namespace in $(kubectl get namespaces -A -o=jsonpath="{.items[*][\'metadata.name\']}"); do\n  kubectl patch serviceaccount default -n ${namespace} -p "$(cat account_update.yaml)"\ndone\n')),(0,r.kt)("p",null,"Execute this script to apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"account_update.yaml")," configuration to ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," service account in all namespaces."),(0,r.kt)("h3",{id:"configure-network-policy"},"Configure Network Policy"),(0,r.kt)("h4",{id:"ensure-that-all-namespaces-have-network-policies-defined"},"Ensure that all Namespaces have Network Policies defined"),(0,r.kt)("p",null,"Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints."),(0,r.kt)("p",null,"Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace. To enforce network policies, a container network interface (CNI) plugin must be enabled. This guide uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/projectcalico/canal"},"Canal")," to provide the policy enforcement. Additional information about CNI providers can be found ",(0,r.kt)("a",{parentName:"p",href:"https://www.suse.com/c/rancher_blog/comparing-kubernetes-cni-providers-flannel-calico-canal-and-weave/"},"here"),"."),(0,r.kt)("p",null,"Once a CNI provider is enabled on a cluster a default network policy can be applied. For reference purposes a ",(0,r.kt)("strong",{parentName:"p"},"permissive")," example is provided below. If you want to allow all traffic to all pods in a namespace (even if policies are added that cause some pods to be treated as \u201cisolated\u201d), you can create a policy that explicitly allows all traffic in that namespace. Save the following configuration as ",(0,r.kt)("inlineCode",{parentName:"p"},"default-allow-all.yaml"),". Additional ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"documentation")," about network policies can be found on the Kubernetes site."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This network policy is just an example and is not recommended for production use.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-allow-all\nspec:\n  podSelector: {}\n  ingress:\n  - {}\n  egress:\n  - {}\n  policyTypes:\n  - Ingress\n  - Egress\n")),(0,r.kt)("p",null,"Create a bash script file called ",(0,r.kt)("inlineCode",{parentName:"p"},"apply_networkPolicy_to_all_ns.sh"),". Be sure to ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod +x apply_networkPolicy_to_all_ns.sh")," so the script has execute permissions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash -e\n\nfor namespace in $(kubectl get namespaces -A -o=jsonpath=\"{.items[*]['metadata.name']}\"); do\n  kubectl apply -f default-allow-all.yaml -n ${namespace}\ndone\n")),(0,r.kt)("p",null,"Execute this script to apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"default-allow-all.yaml")," configuration with the ",(0,r.kt)("strong",{parentName:"p"},"permissive")," ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkPolicy")," to all namespaces."),(0,r.kt)("h2",{id:"known-limitations"},"Known Limitations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rancher ",(0,r.kt)("strong",{parentName:"li"},"exec shell")," and ",(0,r.kt)("strong",{parentName:"li"},"view logs")," for pods are ",(0,r.kt)("strong",{parentName:"li"},"not")," functional in a hardened setup when only a public IP is provided when registering custom nodes. This functionality requires a private IP to be provided when registering the custom nodes."),(0,r.kt)("li",{parentName:"ul"},"When setting ",(0,r.kt)("inlineCode",{parentName:"li"},"default_pod_security_policy_template_id:")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"restricted")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"restricted-noroot"),", based on the pod security policies (PSP) ",(0,r.kt)("a",{parentName:"li",href:"/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/create-pod-security-policies"},"provided")," by Rancher, Rancher creates ",(0,r.kt)("inlineCode",{parentName:"li"},"RoleBindings")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ClusterRoleBindings")," on the ",(0,r.kt)("inlineCode",{parentName:"li"},"default")," service accounts. The CIS check 5.1.5 requires that the ",(0,r.kt)("inlineCode",{parentName:"li"},"default")," service accounts have no roles or cluster roles bound to it apart from the defaults. In addition, the ",(0,r.kt)("inlineCode",{parentName:"li"},"default")," service accounts should be configured such that it does not provide a service account token and does not have any explicit rights assignments.")),(0,r.kt)("h2",{id:"reference-hardened-rke-clusteryml-configuration"},"Reference Hardened RKE ",(0,r.kt)("inlineCode",{parentName:"h2"},"cluster.yml")," Configuration"),(0,r.kt)("p",null,"The reference ",(0,r.kt)("inlineCode",{parentName:"p"},"cluster.yml")," is used by the RKE CLI that provides the configuration needed to achieve a hardened installation of RKE. RKE ",(0,r.kt)("a",{parentName:"p",href:"https://rancher.com/docs/rke/latest/en/installation/"},"documentation")," provides additional details about the configuration items. This reference ",(0,r.kt)("inlineCode",{parentName:"p"},"cluster.yml")," does not include the required ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," directive which will vary depending on your environment. Documentation for node configuration in RKE can be found ",(0,r.kt)("a",{parentName:"p",href:"https://rancher.com/docs/rke/latest/en/config-options/nodes/"},"here"),"."),(0,r.kt)("p",null,"The example ",(0,r.kt)("inlineCode",{parentName:"p"},"cluster.yml")," configuration file contains an Admission Configuration policy in the ",(0,r.kt)("inlineCode",{parentName:"p"},"services.kube-api.admission_configuration")," field. This ",(0,r.kt)("a",{parentName:"p",href:"/reference-guides/rancher-security/psa-restricted-exemptions"},"sample")," policy contains the namespace exemptions necessary for an imported RKE cluster to run properly in Rancher, similar to Rancher's pre-defined ",(0,r.kt)("a",{parentName:"p",href:"/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates"},(0,r.kt)("inlineCode",{parentName:"a"},"rancher-restricted"))," policy."),(0,r.kt)("p",null,"If you prefer to use RKE's default ",(0,r.kt)("inlineCode",{parentName:"p"},"restricted")," policy, then leave the ",(0,r.kt)("inlineCode",{parentName:"p"},"services.kube-api.admission_configuration")," field empty and set ",(0,r.kt)("inlineCode",{parentName:"p"},"services.pod_security_configuration")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"restricted"),". See ",(0,r.kt)("a",{parentName:"p",href:"https://rke.docs.rancher.com/config-options/services/pod-security-admission"},"the RKE docs")," for more information."),(0,r.kt)(d,{groupId:"rke1-version",mdxType:"Tabs"},(0,r.kt)(p,{value:"v1.25 and Newer",default:!0,mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you intend to import an RKE cluster into Rancher, please consult the ",(0,r.kt)("a",{parentName:"p",href:"/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates"},"documentation")," for how to configure the PSA to exempt Rancher system namespaces.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# If you intend to deploy Kubernetes in an air-gapped environment,\n# please consult the documentation on how to configure custom RKE images.\nnodes: []\nkubernetes_version: # Define RKE version\nservices:\n  etcd:\n    uid: 52034\n    gid: 52034\n  kube-api:\n    secrets_encryption_config:\n      enabled: true\n    audit_log:\n      enabled: true\n    event_rate_limit:\n      enabled: true\n    # Leave `pod_security_configuration` out if you are setting a\n    # custom policy in `admission_configuration`. Otherwise set\n    # it to `restricted` to use RKE\'s pre-defined restricted policy,\n    # and remove everything inside `admission_configuration` field.\n    #\n    # pod_security_configuration: restricted\n    #\n    admission_configuration:\n      apiVersion: apiserver.config.k8s.io/v1\n      kind: AdmissionConfiguration\n      plugins:\n        - name: PodSecurity\n          configuration:\n            apiVersion: pod-security.admission.config.k8s.io/v1\n            kind: PodSecurityConfiguration\n            defaults:\n              enforce: "restricted"\n              enforce-version: "latest"\n              audit: "restricted"\n              audit-version: "latest"\n              warn: "restricted"\n              warn-version: "latest"\n            exemptions:\n              usernames: []\n              runtimeClasses: []\n              namespaces: [ calico-apiserver,\n                            calico-system,\n                            cattle-alerting,\n                            cattle-csp-adapter-system,\n                            cattle-epinio-system,\n                            cattle-externalip-system,\n                            cattle-fleet-local-system,\n                            cattle-fleet-system,\n                            cattle-gatekeeper-system,\n                            cattle-global-data,\n                            cattle-global-nt,\n                            cattle-impersonation-system,\n                            cattle-istio,\n                            cattle-istio-system,\n                            cattle-logging,\n                            cattle-logging-system,\n                            cattle-monitoring-system,\n                            cattle-neuvector-system,\n                            cattle-prometheus,\n                            cattle-sriov-system,\n                            cattle-system,\n                            cattle-ui-plugin-system,\n                            cattle-windows-gmsa-system,\n                            cert-manager,\n                            cis-operator-system,\n                            fleet-default,\n                            ingress-nginx,\n                            istio-system,\n                            kube-node-lease,\n                            kube-public,\n                            kube-system,\n                            longhorn-system,\n                            rancher-alerting-drivers,\n                            security-scan,\n                            tigera-operator ]\n  kube-controller:\n    extra_args:\n      feature-gates: RotateKubeletServerCertificate=true\n  kubelet:\n    extra_args:\n      feature-gates: RotateKubeletServerCertificate=true\n      protect-kernel-defaults: "true"\n    generate_serving_certificate: true\naddons: |\n  apiVersion: networking.k8s.io/v1\n  kind: NetworkPolicy\n  metadata:\n    name: default-allow-all\n  spec:\n    podSelector: {}\n    ingress:\n    - {}\n    egress:\n    - {}\n    policyTypes:\n    - Ingress\n    - Egress\n  ---\n  apiVersion: v1\n  kind: ServiceAccount\n  metadata:\n    name: default\n  automountServiceAccountToken: false\n'))),(0,r.kt)(p,{value:"v1.24 and Older",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# If you intend to deploy Kubernetes in an air-gapped environment,\n# please consult the documentation on how to configure custom RKE images.\nnodes: []\nkubernetes_version: # Define RKE version\nservices:\n  etcd:\n    uid: 52034\n    gid: 52034\n  kube-api:\n    secrets_encryption_config:\n      enabled: true\n    audit_log:\n      enabled: true\n    event_rate_limit:\n      enabled: true\n    pod_security_policy: true\n  kube-controller:\n    extra_args:\n      feature-gates: RotateKubeletServerCertificate=true\n  kubelet:\n    extra_args:\n      feature-gates: RotateKubeletServerCertificate=true\n      protect-kernel-defaults: true\n    generate_serving_certificate: true\naddons: |\n  # Upstream Kubernetes restricted PSP policy\n  # https://github.com/kubernetes/website/blob/564baf15c102412522e9c8fc6ef2b5ff5b6e766c/content/en/examples/policy/restricted-psp.yaml\n  apiVersion: policy/v1beta1\n  kind: PodSecurityPolicy\n  metadata:\n    name: restricted-noroot\n  spec:\n    privileged: false\n    # Required to prevent escalations to root.\n    allowPrivilegeEscalation: false\n    requiredDropCapabilities:\n      - ALL\n    # Allow core volume types.\n    volumes:\n      - 'configMap'\n      - 'emptyDir'\n      - 'projected'\n      - 'secret'\n      - 'downwardAPI'\n      # Assume that ephemeral CSI drivers & persistentVolumes set up by the cluster admin are safe to use.\n      - 'csi'\n      - 'persistentVolumeClaim'\n      - 'ephemeral'\n    hostNetwork: false\n    hostIPC: false\n    hostPID: false\n    runAsUser:\n      # Require the container to run without root privileges.\n      rule: 'MustRunAsNonRoot'\n    seLinux:\n      # This policy assumes the nodes are using AppArmor rather than SELinux.\n      rule: 'RunAsAny'\n    supplementalGroups:\n      rule: 'MustRunAs'\n      ranges:\n        # Forbid adding the root group.\n        - min: 1\n          max: 65535\n    fsGroup:\n      rule: 'MustRunAs'\n      ranges:\n        # Forbid adding the root group.\n        - min: 1\n          max: 65535\n    readOnlyRootFilesystem: false\n  ---\n  apiVersion: rbac.authorization.k8s.io/v1\n  kind: ClusterRole\n  metadata:\n    name: psp:restricted-noroot\n  rules:\n  - apiGroups:\n    - extensions\n    resourceNames:\n    - restricted-noroot\n    resources:\n    - podsecuritypolicies\n    verbs:\n    - use\n  ---\n  apiVersion: rbac.authorization.k8s.io/v1\n  kind: ClusterRoleBinding\n  metadata:\n    name: psp:restricted-noroot\n  roleRef:\n    apiGroup: rbac.authorization.k8s.io\n    kind: ClusterRole\n    name: psp:restricted-noroot\n  subjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: Group\n    name: system:serviceaccounts\n  - apiGroup: rbac.authorization.k8s.io\n    kind: Group\n    name: system:authenticated\n  ---\n  apiVersion: networking.k8s.io/v1\n  kind: NetworkPolicy\n  metadata:\n    name: default-allow-all\n  spec:\n    podSelector: {}\n    ingress:\n    - {}\n    egress:\n    - {}\n    policyTypes:\n    - Ingress\n    - Egress\n  ---\n  apiVersion: v1\n  kind: ServiceAccount\n  metadata:\n    name: default\n  automountServiceAccountToken: false\n")))),(0,r.kt)("h2",{id:"reference-hardened-rke-cluster-template-configuration"},"Reference Hardened RKE Cluster Template Configuration"),(0,r.kt)("p",null,"The reference RKE cluster template provides the minimum required configuration to achieve a hardened installation of Kubernetes. RKE templates are used to provision Kubernetes and define Rancher settings. Follow the Rancher ",(0,r.kt)("a",{parentName:"p",href:"/pages-for-subheaders/installation-and-upgrade"},"documentation")," for additional information about installing RKE and its template details."),(0,r.kt)(d,{groupId:"rke1-version",mdxType:"Tabs"},(0,r.kt)(p,{value:"v1.25 and Newer",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"#\n# Cluster Config\n#\ndefault_pod_security_admission_configuration_template_name: rancher-restricted\nenable_network_policy: true\nlocal_cluster_auth_endpoint:\n  enabled: true\nname: # Define cluster name\n\n#\n# Rancher Config\n#\nrancher_kubernetes_engine_config:\n  addon_job_timeout: 45\n  authentication:\n    strategy: x509|webhook\n  kubernetes_version: # Define RKE version\n  services:\n    etcd:\n      uid: 52034\n      gid: 52034\n    kube-api:\n      audit_log:\n        enabled: true\n      event_rate_limit:\n        enabled: true\n      pod_security_policy: false\n      secrets_encryption_config:\n        enabled: true\n    kube-controller:\n      extra_args:\n        feature-gates: RotateKubeletServerCertificate=true\n        tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n    kubelet:\n      extra_args:\n        feature-gates: RotateKubeletServerCertificate=true\n        protect-kernel-defaults: true\n        tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n      generate_serving_certificate: true\n    scheduler:\n      extra_args:\n        tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n"))),(0,r.kt)(p,{value:"v1.24 and Older",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"#\n# Cluster Config\n#\ndefault_pod_security_policy_template_id: restricted-noroot\nenable_network_policy: true\nlocal_cluster_auth_endpoint:\n  enabled: true\nname: # Define cluster name\n\n#\n# Rancher Config\n#\nrancher_kubernetes_engine_config:\n  addon_job_timeout: 45\n  authentication:\n    strategy: x509|webhook\n  kubernetes_version: # Define RKE version\n  services:\n    etcd:\n      uid: 52034\n      gid: 52034\n    kube-api:\n      audit_log:\n        enabled: true\n      event_rate_limit:\n        enabled: true\n      pod_security_policy: true\n      secrets_encryption_config:\n        enabled: true\n    kube-controller:\n      extra_args:\n        feature-gates: RotateKubeletServerCertificate=true\n        tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n    kubelet:\n      extra_args:\n        feature-gates: RotateKubeletServerCertificate=true\n        protect-kernel-defaults: true\n        tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n      generate_serving_certificate: true\n    scheduler:\n      extra_args:\n        tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n")))),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"If you have followed this guide, your RKE custom cluster provisioned by Rancher will be configured to pass the CIS Kubernetes Benchmark. You can review our RKE self-assessment guides to understand how we verified each of the benchmarks and how you can do the same on your cluster."))}_.isMDXComponent=!0}}]);